{"version":3,"file":"typeform_handler.min.js","sources":["../src/typeform_handler.js"],"sourcesContent":["/* eslint-disable no-undef*/\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Typeform Handler functionality for Edwiser Video Format.\n *\n * @module     format_edwiservideoformat/typeform_handler\n * @copyright  Edwiser\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    const SELECTORS = {\n        TYPEFORM_BUTTON: '.evf-typeform-init-button'\n    };\n\n    const CONFIG = {\n        TRIGGER_TIME: 120000, // 2 minutes in milliseconds - MODIFY THIS VALUE\n        CHECK_INTERVAL: 1000, // Check every 1 second\n        STORAGE_KEY: 'typeform_timer_data'\n    };\n\n    // State variables\n    let startTime = null;\n    let timerInterval = null;\n    let isTriggered = false;\n\n    /**\n     * Get stored timer data from localStorage\n     * @returns {object|null} Stored timer data or null\n     */\n    const getStoredTimerData = () => {\n        try {\n            const stored = localStorage.getItem(CONFIG.STORAGE_KEY);\n            return stored ? JSON.parse(stored) : null;\n        } catch (error) {\n            return null;\n        }\n    };\n\n    /**\n     * Store timer data to localStorage\n     * @param {object} data Timer data to store\n     */\n    const storeTimerData = (data) => {\n        try {\n            localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(data));\n        } catch (error) {\n            // Silently fail if localStorage is not available\n        }\n    };\n\n    /**\n     * Clear stored timer data\n     */\n    const clearStoredTimerData = () => {\n        try {\n            localStorage.removeItem(CONFIG.STORAGE_KEY);\n        } catch (error) {\n            // Silently fail if localStorage is not available\n        }\n    };\n\n    /**\n     * Initialize timer with stored data or new start time\n     */\n    const initializeTimer = () => {\n        const storedData = getStoredTimerData();\n\n        if (storedData && !storedData.isTriggered) {\n            // Resume from stored time\n            startTime = storedData.startTime;\n            isTriggered = storedData.isTriggered;\n        } else {\n            // Start fresh timer\n            startTime = Date.now();\n            isTriggered = false;\n        }\n\n        // Store initial data\n        storeTimerData({\n            startTime: startTime,\n            isTriggered: isTriggered\n        });\n    };\n\n    /**\n     * Start the timer\n     */\n    const startTimer = () => {\n        timerInterval = setInterval(() => {\n            checkTime();\n        }, CONFIG.CHECK_INTERVAL);\n    };\n\n    /**\n     * Check if enough time has passed\n     */\n    const checkTime = () => {\n        if (isTriggered) {\n            return; // Already triggered\n        }\n\n        const currentTime = Date.now();\n        const timeSpent = currentTime - startTime;\n\n        // Update stored data\n        storeTimerData({\n            startTime: startTime,\n            isTriggered: isTriggered\n        });\n\n        // Check if enough time has passed\n        if (timeSpent >= CONFIG.TRIGGER_TIME) {\n            triggerTypeform();\n        }\n    };\n\n    /**\n     * Trigger the typeform\n     */\n    const triggerTypeform = () => {\n        isTriggered = true;\n\n        // Update stored data\n        storeTimerData({\n            startTime: startTime,\n            isTriggered: isTriggered\n        });\n\n        // Find the typeform button\n        const typeformButton = $(SELECTORS.TYPEFORM_BUTTON);\n\n        if (typeformButton.length > 0) {\n            // Trigger click on the typeform button\n            typeformButton.trigger('click');\n\n            // Stop the timer\n            stopTimer();\n        }\n    };\n\n    /**\n     * Stop the timer\n     */\n    const stopTimer = () => {\n        if (timerInterval) {\n            clearInterval(timerInterval);\n            timerInterval = null;\n        }\n    };\n\n    /**\n     * Get current time spent\n     * @returns {number} Time spent in milliseconds\n     */\n    const getTimeSpent = () => {\n        return Date.now() - startTime;\n    };\n\n    /**\n     * Reset the timer (for testing or manual reset)\n     */\n    const resetTimer = () => {\n        stopTimer();\n        clearStoredTimerData();\n        startTime = Date.now();\n        isTriggered = false;\n        storeTimerData({\n            startTime: startTime,\n            isTriggered: isTriggered\n        });\n        startTimer();\n    };\n\n    /**\n     * Init method\n     */\n    function init() {\n        $(document).ready(function() {\n            initializeTimer();\n            startTimer();\n        });\n    }\n\n\n    // Must return the init function.\n    return {\n        init: init,\n        getTimeSpent: getTimeSpent,\n        resetTimer: resetTimer,\n        trigger: triggerTypeform\n    };\n});"],"names":["define","$","SELECTORS","CONFIG","startTime","timerInterval","isTriggered","storeTimerData","data","localStorage","setItem","JSON","stringify","error","initializeTimer","storedData","stored","getItem","parse","getStoredTimerData","Date","now","startTimer","setInterval","checkTime","timeSpent","triggerTypeform","typeformButton","length","trigger","stopTimer","clearInterval","init","document","ready","getTimeSpent","resetTimer","removeItem","clearStoredTimerData"],"mappings":";;;;;;;AAwBAA,oDAAO,CAAC,WAAW,SAASC,SAElBC,0BACe,4BAGfC,oBACY,KADZA,sBAEc,IAFdA,mBAGW,0BAIbC,UAAY,KACZC,cAAgB,KAChBC,aAAc,QAmBZC,eAAkBC,WAEhBC,aAAaC,QAAQP,mBAAoBQ,KAAKC,UAAUJ,OAC1D,MAAOK,UAmBPC,gBAAkB,WACdC,WApCiB,gBAEbC,OAASP,aAAaQ,QAAQd,2BAC7Ba,OAASL,KAAKO,MAAMF,QAAU,KACvC,MAAOH,cACE,OA+BQM,GAEfJ,aAAeA,WAAWT,aAE1BF,UAAYW,WAAWX,UACvBE,YAAcS,WAAWT,cAGzBF,UAAYgB,KAAKC,MACjBf,aAAc,GAIlBC,eAAe,CACXH,UAAWA,UACXE,YAAaA,eAOfgB,WAAa,KACfjB,cAAgBkB,aAAY,KACxBC,cACDrB,wBAMDqB,UAAY,QACVlB,yBAKEmB,UADcL,KAAKC,MACOjB,UAGhCG,eAAe,CACXH,UAAWA,UACXE,YAAaA,cAIbmB,WAAatB,qBACbuB,mBAOFA,gBAAkB,KACpBpB,aAAc,EAGdC,eAAe,CACXH,UAAWA,UACXE,YAAaA,oBAIXqB,eAAiB1B,EAAEC,2BAErByB,eAAeC,OAAS,IAExBD,eAAeE,QAAQ,SAGvBC,cAOFA,UAAY,KACVzB,gBACA0B,cAAc1B,eACdA,cAAgB,aAuCjB,CACH2B,gBATA/B,EAAEgC,UAAUC,OAAM,WACdpB,kBACAQ,iBAQJa,aAjCiB,IACVf,KAAKC,MAAQjB,UAiCpBgC,WA3Be,KACfN,YA7GyB,UAErBrB,aAAa4B,WAAWlC,oBAC1B,MAAOU,UA2GTyB,GACAlC,UAAYgB,KAAKC,MACjBf,aAAc,EACdC,eAAe,CACXH,UAAWA,UACXE,YAAaA,cAEjBgB,cAmBAO,QAASH"}