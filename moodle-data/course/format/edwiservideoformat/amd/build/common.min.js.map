{"version":3,"file":"common.min.js","sources":["../src/common.js"],"sourcesContent":["/* eslint-disable no-undef*/\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Common functionality for Edwiser Video Format.\n *\n * @module     format_edwiservideoformat/common\n * @copyright  Edwiser\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    const SELECTORS = {\n        COURSE_INDEX_ITEM: \".courseindex-item\",\n        COURSE_INDEX_ITEM_LINK: \".courseindex-item .courseindex-link[data-for='cm_name']\",\n        ACTIVITY_LINK: \".activity-item .activityname  .aalink\",\n    };\n\n    /**\n     * Extract activity type and ID from a URL\n     * @param {string} url - The URL to parse\n     * @returns {object|null} - Object with modtype and modid, or null if not found\n     */\n    const extractActivityInfo = (url) => {\n        try {\n            const urlObj = new URL(url);\n            const pathParts = urlObj.pathname.split('/');\n\n            // Look for pattern: /mod/{activitytype}/view.php\n            const modIndex = pathParts.indexOf('mod');\n            if (modIndex !== -1 && modIndex + 2 < pathParts.length) {\n                const activityType = pathParts[modIndex + 1];\n                const viewFile = pathParts[modIndex + 2];\n\n                // Check if it's a view.php file\n                if (viewFile === 'view.php') {\n                    const modId = urlObj.searchParams.get('id');\n                    if (modId) {\n                        return {\n                            modtype: activityType,\n                            modid: modId\n                        };\n                    }\n                }\n            }\n            return null;\n        } catch (error) {\n            // Error parsing URL, return null\n            return null;\n        }\n    };\n\n    /**\n     * Create new redirect URL with modtype and modid parameters\n     * @param {string} baseUrl - The base course URL\n     * @param {string} modtype - The activity type\n     * @param {string} modid - The activity ID\n     * @returns {string} - The new redirect URL\n     */\n    const createRedirectUrl = (baseUrl, modtype, modid) => {\n        try {\n            const urlObj = new URL(baseUrl);\n            urlObj.searchParams.set('modtype', modtype);\n            urlObj.searchParams.set('modid', modid);\n            return urlObj.toString();\n        } catch (error) {\n            // Error creating redirect URL, return base URL\n            return baseUrl;\n        }\n    };\n\n    /**\n     * Register common event handlers\n     */\n    const registerCommonEvents = () => {\n        // Handle both course index item links and activity item links\n        $(document).on('click', `${SELECTORS.COURSE_INDEX_ITEM_LINK}, ${SELECTORS.ACTIVITY_LINK}`, function(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            const link = $(this);\n            const href = link.attr('href');\n\n            if (!href) {\n                return;\n            }\n\n            // Extract activity info from the URL\n            const activityInfo = extractActivityInfo(href);\n\n            if (activityInfo) {\n                // Get the current course URL and preserve the course ID\n                // const currentUrl = window.location.href;\n                // const urlObj = new URL(currentUrl);\n                // const courseId = urlObj.searchParams.get('id');\n\n                // Create base course URL with course ID\n                const courseUrl = M.cfg.wwwroot + '/course/view.php?id=' + M.cfg.courseId;\n                // const courseUrl = courseId ? `${urlObj.origin}${urlObj.pathname}?id=${courseId}` : currentUrl.split('?')[0];\n\n                // Create new redirect URL\n                const redirectUrl = createRedirectUrl(courseUrl, activityInfo.modtype, activityInfo.modid);\n\n                // Redirect to the new URL\n                window.location.href = redirectUrl;\n            } else {\n                // If no activity info found, follow the original link\n                // window.location.href = href;\n            }\n        });\n    };\n\n    /**\n     * Get the modid parameter from the URL if present.\n     * @returns {number|null} The modid as an integer, or null if not present.\n     */\n    function getModIdFromUrl() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const modid = urlParams.get('modid');\n        return modid ? parseInt(modid, 10) : null;\n    }\n\n    /**\n     * Get the modtype parameter from the URL if present.\n     * @returns {string|null} The modtype, or null if not present.\n     */\n    function getModTypeFromUrl() {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('modtype');\n    }\n\n        /**\n     * Set the current page item in the course index drawer using a simple URL matching approach.\n     * Handles both view and edit modes.\n     */\n    function setCurrentPageItem() {\n        const modid = getModIdFromUrl();\n        const modtype = getModTypeFromUrl();\n\n        if (!modid || !modtype) {\n            return;\n        }\n\n        // Create the target URL: sitename/mod/modtype/view.php?id=modid\n        const targetUrl = M.cfg.wwwroot + '/mod/' + modtype + '/view.php?id=' + modid;\n\n        // Try multiple selectors for different modes and structures\n        let matchingLink = null;\n\n        // Method 1: Try courseindex-link (view mode)\n        matchingLink = $('.courseindex-link').filter(function() {\n            return $(this).attr('href') === targetUrl;\n        });\n\n        // Method 2: Try activity links in edit mode\n        if (matchingLink.length === 0) {\n            matchingLink = $('.activity-item .activityname a, .activity-item .aalink').filter(function() {\n                return $(this).attr('href') === targetUrl;\n            });\n        }\n\n        // Method 3: Try any link with the target URL\n        if (matchingLink.length === 0) {\n            matchingLink = $('a[href=\"' + targetUrl + '\"]');\n        }\n\n        // Method 4: Try finding by data attributes (if available)\n        if (matchingLink.length === 0) {\n            matchingLink = $('[data-cmid=\"' + modid + '\"]');\n        }\n\n        if (matchingLink.length > 0) {\n            // Remove any existing pageitem classes\n            $('.courseindex-item, .activity-item').removeClass('pageitem');\n\n            // Add pageitem class to the nearest courseindex-item or activity-item\n            const courseIndexItem = matchingLink.closest('.courseindex-item, .activity-item');\n            if (courseIndexItem.length > 0) {\n                courseIndexItem.addClass('pageitem');\n\n                // Optional: Scroll to the element\n                // courseIndexItem[0].scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            }\n        }\n    }\n\n\n\n    /**\n     * Initializes the show more/less summary toggle for long section summaries.\n     */\n    function initShowMoreSummary() {\n        var summaryheight = $('.read-more-target').height();\n        if (summaryheight > 300) {\n            $('.generalsectioninfo').find('#readmorebtn').removeClass('d-none');\n            $('.read-more-target').addClass('summary-collapsed').removeClass('summary-expanded');\n        }\n        $('#readmorebtn').on('click', function() {\n            $('.read-more-target').addClass('summary-expanded').removeClass('summary-collapsed');\n            $('.generalsectioninfo').find('#readmorebtn').addClass('d-none');\n            $('.generalsectioninfo').find('#readlessbtn').removeClass('d-none');\n        });\n        $('#readlessbtn').on('click', function() {\n            $('.read-more-target').addClass('summary-collapsed').removeClass('summary-expanded');\n            $('.generalsectioninfo').find('#readmorebtn').removeClass('d-none');\n            $('.generalsectioninfo').find('#readlessbtn').addClass('d-none');\n        });\n    }\n\n    /**\n     * Init method\n     */\n    function init() {\n        $(document).ready(function() {\n\n            registerCommonEvents();\n\n            $('body').addClass('edwiservideoformat-' + M.cfg.theme + '-body');\n\n            // Set current page item with a delay to ensure DOM is fully loaded\n            // This is especially important for edit mode where course index might load dynamically\n            setTimeout(setCurrentPageItem, 200);\n\n            initShowMoreSummary();\n\n            if(evfmoodleversion < 500) {\n                $('body').addClass('edwiservideoformat-moodle-405');\n            }\n            else {\n                $('body').addClass('edwiservideoformat-moodle-500');\n            }\n        });\n    }\n\n    // Must return the init function.\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","SELECTORS","registerCommonEvents","document","on","event","preventDefault","stopPropagation","href","this","attr","activityInfo","url","urlObj","URL","pathParts","pathname","split","modIndex","indexOf","length","activityType","modId","searchParams","get","modtype","modid","error","extractActivityInfo","redirectUrl","baseUrl","set","toString","createRedirectUrl","M","cfg","wwwroot","courseId","window","location","setCurrentPageItem","URLSearchParams","search","parseInt","getModIdFromUrl","targetUrl","matchingLink","filter","removeClass","courseIndexItem","closest","addClass","init","ready","theme","setTimeout","height","find","evfmoodleversion"],"mappings":";;;;;;;AAwBAA,0CAAO,CAAC,WAAW,SAASC,SAElBC,iCAEsB,0DAFtBA,wBAGa,wCA2DbC,qBAAuB,KAEzBF,EAAEG,UAAUC,GAAG,kBAAYH,8CAAqCA,0BAA2B,SAASI,OAChGA,MAAMC,iBACND,MAAME,wBAGAC,KADOR,EAAES,MACGC,KAAK,YAElBF,kBAKCG,aAjEeC,CAAAA,gBAEfC,OAAS,IAAIC,IAAIF,KACjBG,UAAYF,OAAOG,SAASC,MAAM,KAGlCC,SAAWH,UAAUI,QAAQ,WACjB,IAAdD,UAAmBA,SAAW,EAAIH,UAAUK,OAAQ,OAC9CC,aAAeN,UAAUG,SAAW,MAIzB,aAHAH,UAAUG,SAAW,GAGT,OACnBI,MAAQT,OAAOU,aAAaC,IAAI,SAClCF,YACO,CACHG,QAASJ,aACTK,MAAOJ,eAKhB,KACT,MAAOK,cAEE,OAwCcC,CAAoBpB,SAErCG,aAAc,OAWRkB,YA1CQ,EAACC,QAASL,QAASC,mBAE/Bb,OAAS,IAAIC,IAAIgB,gBACvBjB,OAAOU,aAAaQ,IAAI,UAAWN,SACnCZ,OAAOU,aAAaQ,IAAI,QAASL,OAC1Bb,OAAOmB,WAChB,MAAOL,cAEEG,UAkCiBG,CAJFC,EAAEC,IAAIC,QAAU,uBAAyBF,EAAEC,IAAIE,SAIhB1B,aAAac,QAASd,aAAae,OAGpFY,OAAOC,SAAS/B,KAAOqB,0BA+B1BW,2BACCd,uBAlBAA,MADY,IAAIe,gBAAgBH,OAAOC,SAASG,QAC9BlB,IAAI,gBACrBE,MAAQiB,SAASjB,MAAO,IAAM,KAiBvBkB,GACRnB,QAVY,IAAIgB,gBAAgBH,OAAOC,SAASG,QACrClB,IAAI,eAWhBE,QAAUD,qBAKToB,UAAYX,EAAEC,IAAIC,QAAU,QAAUX,QAAU,gBAAkBC,UAGpEoB,aAAe,QAGnBA,aAAe9C,EAAE,qBAAqB+C,QAAO,kBAClC/C,EAAES,MAAMC,KAAK,UAAYmC,aAIR,IAAxBC,aAAa1B,SACb0B,aAAe9C,EAAE,0DAA0D+C,QAAO,kBACvE/C,EAAES,MAAMC,KAAK,UAAYmC,cAKZ,IAAxBC,aAAa1B,SACb0B,aAAe9C,EAAE,WAAa6C,UAAY,OAIlB,IAAxBC,aAAa1B,SACb0B,aAAe9C,EAAE,eAAiB0B,MAAQ,OAG1CoB,aAAa1B,OAAS,EAAG,CAEzBpB,EAAE,qCAAqCgD,YAAY,kBAG7CC,gBAAkBH,aAAaI,QAAQ,qCACzCD,gBAAgB7B,OAAS,GACzB6B,gBAAgBE,SAAS,mBAyD9B,CACHC,gBAvBApD,EAAEG,UAAUkD,OAAM,WAEdnD,uBAEAF,EAAE,QAAQmD,SAAS,sBAAwBjB,EAAEC,IAAImB,MAAQ,SAIzDC,WAAWf,mBAAoB,KA7BfxC,EAAE,qBAAqBwD,SACvB,MAChBxD,EAAE,uBAAuByD,KAAK,gBAAgBT,YAAY,UAC1DhD,EAAE,qBAAqBmD,SAAS,qBAAqBH,YAAY,qBAErEhD,EAAE,gBAAgBI,GAAG,SAAS,WAC1BJ,EAAE,qBAAqBmD,SAAS,oBAAoBH,YAAY,qBAChEhD,EAAE,uBAAuByD,KAAK,gBAAgBN,SAAS,UACvDnD,EAAE,uBAAuByD,KAAK,gBAAgBT,YAAY,aAE9DhD,EAAE,gBAAgBI,GAAG,SAAS,WAC1BJ,EAAE,qBAAqBmD,SAAS,qBAAqBH,YAAY,oBACjEhD,EAAE,uBAAuByD,KAAK,gBAAgBT,YAAY,UAC1DhD,EAAE,uBAAuByD,KAAK,gBAAgBN,SAAS,aAoBpDO,iBAAmB,IAClB1D,EAAE,QAAQmD,SAAS,iCAGnBnD,EAAE,QAAQmD,SAAS"}